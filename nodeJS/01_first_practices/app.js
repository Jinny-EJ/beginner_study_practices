const http = require('http');
// require 이라는 함수 호출시, 노드 JS 에서 제공하는 유틸리티 메서드와 속성으로 가득 찬 객체가 반환됨. 

function handleRequest(request, response) {}

const server = http.createServer(handleRequest);
//createServer 메서드 = 웹 서버를 생성하는 역할 
// 내부적으로 필요한 이 모든 서버 기능이 포함된 객체를 반환할 것. 
// 여기서 아이디어는 들어오는 요청을 처리하고 응답을 다시 보내는 방법을 알고 있는 서버를 먼저 생성.


//노드 JS 기반 웹 사이트를 호스팅하려면 여전히 외부 호스팅 공급자에 도달해서 코드를 업로드 해야함.
// 차이점은 간단한 드래그 앤드 드롭 호스팅 공급자를 사용하지 않고 대신 노드 JS 가 미리 설치된 컴퓨터를 제공하는  호스팅 공급자가 필요하지만 
// 나중에 노드JS 기반 웹사이트를 배포하고 호스팅하는 방법으로 다시 돌아올 것. 


// 다음 단계로서 포트 번호에서 수신 대기를 시작하는 것. 


// amazon.com => Send a request to Amazon's server
// 대부분의 사이트는 대부분의 포트가 닫혀 있음. 가능한 한 적은 진입점을 원하기 때문. 
// 기본적으로 아마존 닷컴에서는 80포트로 보냄.
// amazon:80
// 사실 기본적으로는 amazon: 443 이용. 왜냐하면 암호화된 보안 방식으로 요청을 보내는 SSL 을 사용하기 때문. 
// 하지만 80도 암호화되지 않은 요청을 보내는 일반적인 포트임. 

// 노드 JS 로 작업해서 자체 서버를 생성할 때 들어오는 요청을 수신할 포트를 노드 JS 에 알려야 함. 
// listen 의 첫 매개변수 값은 포트 번호 전달. 여기서는 3000 
// 개발을 할 때에는 서버를 이리저리 시도해보고 모든 것이 작동하는지 테스트하기 위해 일반적으로 기본이 아닌 포트를 사용해서 로컬 개발 시스템에서 실행 중인 다른 서비스와 충돌하지 않도록 함.    
server.listen(3000);

// 이 코드 실행시 서버를 만들어서 포트 3000에서 들어오는 요청을 수신함.
// 그런 다음 나중에 코드로 배포하고 일부 호스팅 공급자에서 임대한 실제 원격 컴퓨터로 옮기면 기본적으로 80 또는 443 으로 교체함. 
